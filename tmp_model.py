# generated by datamodel-codegen:
#   filename:  core
#   timestamp: 2022-07-27T20:02:58+00:00

from __future__ import annotations

from typing import Any, List, Optional

from pydantic import BaseModel, Field


class Model(BaseModel):
    __root__: Any


class BaseLegalHoldMatterResponseCore(BaseModel):
    matterId: Optional[str] = Field(
        None, description='The unique identifier of the matter.'
    )
    name: Optional[str] = Field(None, description='The name of the matter.')


class CustodianResponseCore(BaseModel):
    userId: Optional[str] = Field(
        None,
        description='The unique identifier of the Code42 user who is the custodian.',
    )
    username: Optional[str] = Field(
        None, description='The Code42 username of the custodian.'
    )
    email: Optional[str] = Field(None, description='The email of the custodian.')


class DevicePreserveResponseCore(BaseModel):
    deviceId: Optional[str] = Field(
        None, description='A globally unique ID (guid) for this device.'
    )
    legacyDeviceId: Optional[str] = Field(
        None,
        description='The device ID to use for older console-based APIs that require a device Id.',
    )
    name: Optional[str] = Field(None, description='Device name.')
    osHostname: Optional[str] = Field(
        None, description="Device Hostname according to the device's OS."
    )
    status: Optional[str] = Field(
        None,
        description='Device status. Values: Active, Deactivated, Blocked, Deauthorized (Active/Deactivated followed by optional Blocked and/or Deauthorized)',
    )
    active: Optional[bool] = Field(
        None, description='True means the device will show up on reports, etc.'
    )
    blocked: Optional[bool] = Field(
        None,
        description='True means device continues backing up, but restores and logins are disabled.',
    )
    alertState: Optional[int] = Field(
        None, description='0=ok, 1=connection warning, 2=connection critical'
    )
    userId: Optional[str] = Field(
        None, description='A globally unique ID for this user.'
    )
    legacyUserId: Optional[str] = Field(
        None,
        description='The user ID to use for older console-based APIs that require a user Id.\r\nIf your endpoint domain starts with "console" instead of "api", use this Id for endpoints that require a userId.',
    )
    orgId: Optional[str] = Field(
        None,
        description='A globally unique ID for the Code42 organization of the user owning this device.',
    )
    legacyOrgId: Optional[str] = Field(
        None,
        description='The org ID to use for older console-based APIs that require an org Id.\r\nIf your endpoint domain starts with "console" instead of "api", use this Id for endpoints that require an orgId.',
    )
    externalReferenceInfo: Optional[str] = Field(
        None,
        description='Optional external reference information, such as a serial number, asset tag, employee ID, or help desk issue ID.',
    )
    notes: Optional[str] = Field(None, description='Optional descriptive information.')
    lastConnected: Optional[str] = Field(
        None,
        description='The last day and time this device was connected to the server.',
    )
    osName: Optional[str] = Field(
        None,
        description='Operating system name. Values: Windows*, Mac OS X, Linux, Android, iOS, SunOS, etc',
    )
    osVersion: Optional[str] = Field(
        None, description='Operating system version. Values: 10.5.1, 6.2, etc'
    )
    osArch: Optional[str] = Field(
        None, description='Hardware architecture. Values: i386, amd64, sparc, x86, etc'
    )
    address: Optional[str] = Field(
        None, description='Internal IP address and port. Example: 192.168.42.1:4282'
    )
    remoteAddress: Optional[str] = Field(
        None, description='External IP address and port. Example: 171.22.110.41:13958'
    )
    timeZone: Optional[str] = Field(
        None, description='Examples: Australia/Canberra, Asia/Calcutta'
    )
    version: Optional[str] = Field(None, description='Device product display version.')
    build: Optional[int] = Field(
        None,
        description='Device build version long number, will only be applicable to CP4/SP devices.',
    )
    creationDate: Optional[str] = Field(
        None, description='Date and time this device was created.'
    )
    modificationDate: Optional[str] = Field(
        None, description='Date and time this device was last modified.'
    )
    loginDate: Optional[str] = Field(
        None, description='Date and time this device was last logged in.'
    )


class DeviceResponseCore(BaseModel):
    deviceId: Optional[str] = Field(
        None, description='A globally unique ID (guid) for this device.'
    )
    legacyDeviceId: Optional[str] = Field(
        None,
        description='The device ID to use for older console-based APIs that require a device Id.',
    )
    name: Optional[str] = Field(None, description='Device name.')
    osHostname: Optional[str] = Field(
        None, description="Device Hostname according to the device's OS."
    )
    status: Optional[str] = Field(
        None,
        description='Device status. Values: Active, Deactivated, Blocked, Deauthorized (Active/Deactivated followed by optional Blocked and/or Deauthorized)',
    )
    active: Optional[bool] = Field(
        None, description='True means the device will show up on reports, etc.'
    )
    blocked: Optional[bool] = Field(
        None,
        description='True means device continues backing up, but restores and logins are disabled.',
    )
    alertState: Optional[int] = Field(
        None, description='0=ok, 1=connection warning, 2=connection critical'
    )
    userId: Optional[str] = Field(
        None, description='A globally unique ID for this user.'
    )
    legacyUserId: Optional[str] = Field(
        None,
        description='The user ID to use for older console-based APIs that require a user Id.\r\nIf your endpoint domain starts with "console" instead of "api", use this Id for endpoints that require a userId.',
    )
    orgId: Optional[str] = Field(
        None,
        description='A globally unique ID for the Code42 organization of the user owning this device.',
    )
    legacyOrgId: Optional[str] = Field(
        None,
        description='The org ID to use for older console-based APIs that require an org Id.\r\nIf your endpoint domain starts with "console" instead of "api", use this Id for endpoints that require an orgId.',
    )
    externalReferenceInfo: Optional[str] = Field(
        None,
        description='Optional external reference information, such as a serial number, asset tag, employee ID, or help desk issue ID.',
    )
    notes: Optional[str] = Field(None, description='Optional descriptive information.')
    lastConnected: Optional[str] = Field(
        None,
        description='The last day and time this device was connected to the server.',
    )
    osName: Optional[str] = Field(
        None,
        description='Operating system name. Values: Windows*, Mac OS X, Linux, Android, iOS, SunOS, etc',
    )
    osVersion: Optional[str] = Field(
        None, description='Operating system version. Values: 10.5.1, 6.2, etc'
    )
    osArch: Optional[str] = Field(
        None, description='Hardware architecture. Values: i386, amd64, sparc, x86, etc'
    )
    address: Optional[str] = Field(
        None, description='Internal IP address and port. Example: 192.168.42.1:4282'
    )
    remoteAddress: Optional[str] = Field(
        None, description='External IP address and port. Example: 171.22.110.41:13958'
    )
    timeZone: Optional[str] = Field(
        None, description='Examples: Australia/Canberra, Asia/Calcutta'
    )
    version: Optional[str] = Field(None, description='Device product display version.')
    build: Optional[int] = Field(
        None,
        description='Device build version long number, will only be applicable to CP4/SP devices.',
    )
    creationDate: Optional[str] = Field(
        None, description='Date and time this device was created.'
    )
    modificationDate: Optional[str] = Field(
        None, description='Date and time this device was last modified.'
    )
    loginDate: Optional[str] = Field(
        None, description='Date and time this device was last logged in.'
    )


class JwtResponseCore(BaseModel):
    bearerToken: Optional[str] = Field(
        None,
        description="A token representing a Code42 user's identity and permission set.",
    )


class LegalHoldAddCustodianRequestCore(BaseModel):
    userId: Optional[str] = Field(
        None,
        description='The unique identifier of the user to add to the legal hold matter.',
    )


class LegalHoldCreatorUserResponseCore(BaseModel):
    userId: Optional[str] = Field(
        None, description='A globally unique ID for this user.'
    )
    username: Optional[str] = Field(
        None, description='The name the user uses to log in to Code42.'
    )


class LegalHoldCustodianMatterPreserveResponseCore(BaseModel):
    membershipActive: Optional[bool] = Field(
        None, description="Whether the custodian's membership is active."
    )
    membershipCreationDate: Optional[str] = Field(
        None, description='The data the custodian was added to the matter.'
    )
    matterId: Optional[str] = Field(
        None, description='The unique identifier of the matter.'
    )
    name: Optional[str] = Field(None, description='The name of the matter.')


class LegalHoldMatterCustodianPreserveResponseCore(BaseModel):
    membershipActive: Optional[bool] = Field(
        None, description="Whether the custodian's membership is active."
    )
    membershipCreationDate: Optional[str] = Field(
        None, description='The data the custodian was added to the matter.'
    )
    userId: Optional[str] = Field(
        None,
        description='The unique identifier of the Code42 user who is the custodian.',
    )
    username: Optional[str] = Field(
        None, description='The Code42 username of the custodian.'
    )
    email: Optional[str] = Field(None, description='The email of the custodian.')


class LegalHoldMatterRequestCore(BaseModel):
    policyId: Optional[str] = Field(
        None, description='The unique identifier of the policy involved in the matter.'
    )
    name: Optional[str] = Field(None, description='The name to give to the matter.')
    description: Optional[str] = Field(
        None, description='An optional description to give to the matter.'
    )
    notes: Optional[str] = Field(
        None, description='Optional notes to give to the matter'
    )


class LegalHoldMembershipResponseCore(BaseModel):
    membershipActive: Optional[bool] = Field(
        None, description="Whether the custodian's membership is active."
    )
    membershipCreationDate: Optional[str] = Field(
        None, description='The data the custodian was added to the matter.'
    )
    matter: Optional[BaseLegalHoldMatterResponseCore] = None
    custodian: Optional[CustodianResponseCore] = None


class LegalHoldReactivateMatterResponseCore(BaseModel):
    membershipsChanged: Optional[bool] = Field(
        None,
        description='Whether the memberships were changed upon reactivation.\r\nIf true, this means that there were custodians on the matter at the time the matter got deactivated,\r\nand when reactivating, these users were placed back in legal hold.',
    )


class OAuthResponseCore(BaseModel):
    accessToken: Optional[str] = Field(
        None,
        description="A token representing a Code42 user's identity and permission set.",
    )
    tokenType: Optional[str] = Field(None, description='Type of token.')
    expiresIn: Optional[int] = Field(None, description='Lifespan of the token.')


class OrgCreateRequestCore(BaseModel):
    orgName: Optional[str] = Field(None, description='The name of the org to create.')
    orgExtRef: Optional[str] = Field(
        None, description='The external reference of the org to create.'
    )
    parentOrgGuid: Optional[str] = Field(
        None, description='The parent ID of the org to create.'
    )
    notes: Optional[str] = Field(None, description='The notes of the org to create.')


class OrgPreserveResponseCore(BaseModel):
    orgGuid: Optional[str] = Field(
        None, description='The globally unique ID of this org.'
    )
    orgName: Optional[str] = Field(None, description='The name of this org')
    orgExtRef: Optional[str] = Field(
        None,
        description='The optional external reference for this org, such as a serial number, asset tag, employee ID, or help desk issue ID.',
    )
    notes: Optional[str] = Field(
        None,
        description='The notes for this org.  Intended for optional additional descriptive information.',
    )
    parentOrgGuid: Optional[str] = Field(
        None, description='The globally unique ID of the parent org.'
    )
    active: Optional[bool] = Field(
        None, description='Whether or not the org is currently active.'
    )
    creationDate: Optional[str] = Field(
        None, description='The date and time the org was created.'
    )
    modificationDate: Optional[str] = Field(
        None, description='The date and time the org was last modified.'
    )
    deactivationDate: Optional[str] = Field(
        None, description='The date and time the org was deactivated.'
    )
    registrationKey: Optional[str] = Field(
        None, description='The registration key for the org.'
    )
    userCount: Optional[int] = Field(
        None, description='The count of users within this org.'
    )
    computerCount: Optional[int] = Field(
        None, description='The count of computers within this org.'
    )
    orgCount: Optional[int] = Field(
        None, description='The count of child orgs for this org.'
    )


class OrgResponseCore(BaseModel):
    orgGuid: Optional[str] = Field(
        None, description='The globally unique ID of this org.'
    )
    orgName: Optional[str] = Field(None, description='The name of this org')
    orgExtRef: Optional[str] = Field(
        None,
        description='The optional external reference for this org, such as a serial number, asset tag, employee ID, or help desk issue ID.',
    )
    notes: Optional[str] = Field(
        None,
        description='The notes for this org.  Intended for optional additional descriptive information.',
    )
    parentOrgGuid: Optional[str] = Field(
        None, description='The globally unique ID of the parent org.'
    )
    active: Optional[bool] = Field(
        None, description='Whether or not the org is currently active.'
    )
    creationDate: Optional[str] = Field(
        None, description='The date and time the org was created.'
    )
    modificationDate: Optional[str] = Field(
        None, description='The date and time the org was last modified.'
    )
    deactivationDate: Optional[str] = Field(
        None, description='The date and time the org was deactivated.'
    )
    registrationKey: Optional[str] = Field(
        None, description='The registration key for the org.'
    )
    userCount: Optional[int] = Field(
        None, description='The count of users within this org.'
    )
    computerCount: Optional[int] = Field(
        None, description='The count of computers within this org.'
    )
    orgCount: Optional[int] = Field(
        None, description='The count of child orgs for this org.'
    )


class OrgUpdateRequestCore(BaseModel):
    orgName: Optional[str] = Field(None, description='The updated name for the org.')
    orgExtRef: Optional[str] = Field(
        None, description='The updated external reference for the org.'
    )
    notes: Optional[str] = Field(None, description='The updated notes for the org.')


class PrincipalInfoResponseCore(BaseModel):
    type: Optional[str] = None
    principalId: Optional[str] = None
    displayName: Optional[str] = None


class UserPreserveResponseCore(BaseModel):
    legacyUserId: Optional[str] = Field(
        None,
        description='The user ID to use for older console-based APIs that require a user Id.\r\nIf your endpoint domain starts with "console" instead of "api", use this Id for endpoints that require a userId.',
    )
    userId: Optional[str] = Field(
        None, description='A globally unique ID for this user.'
    )
    username: Optional[str] = Field(
        None, description='The name the user uses to log in to Code42.'
    )
    firstName: Optional[str] = Field(
        None, description='The first (given) name of the user.'
    )
    lastName: Optional[str] = Field(
        None, description='The last (family) name of the user.'
    )
    legacyOrgId: Optional[str] = Field(
        None,
        description='The org ID to use for older console-based APIs that require an org Id.\r\nIf your endpoint domain starts with "console" instead of "api", use this Id for endpoints that require an orgId.',
    )
    orgId: Optional[str] = Field(
        None,
        description='The globally unique ID of the Code42 organization this user belongs to.',
    )
    orgName: Optional[str] = Field(
        None, description='The name of the Code42 organization this user belongs to.'
    )
    notes: Optional[str] = Field(
        None, description='Descriptive information about the user.'
    )
    active: Optional[bool] = Field(
        None, description='Whether or not the user is enabled.'
    )
    blocked: Optional[bool] = Field(
        None,
        description='Whether or not logins and restores are disabled for the user.',
    )
    creationDate: Optional[str] = Field(
        None, description='The date and time the user was created.'
    )
    modificationDate: Optional[str] = Field(
        None, description='The date and time the user was last modified.'
    )


class UserResponseCore(BaseModel):
    legacyUserId: Optional[str] = Field(
        None,
        description='The user ID to use for older console-based APIs that require a user Id.\r\nIf your endpoint domain starts with "console" instead of "api", use this Id for endpoints that require a userId.',
    )
    userId: Optional[str] = Field(
        None, description='A globally unique ID for this user.'
    )
    username: Optional[str] = Field(
        None, description='The name the user uses to log in to Code42.'
    )
    firstName: Optional[str] = Field(
        None, description='The first (given) name of the user.'
    )
    lastName: Optional[str] = Field(
        None, description='The last (family) name of the user.'
    )
    legacyOrgId: Optional[str] = Field(
        None,
        description='The org ID to use for older console-based APIs that require an org Id.\r\nIf your endpoint domain starts with "console" instead of "api", use this Id for endpoints that require an orgId.',
    )
    orgId: Optional[str] = Field(
        None,
        description='The globally unique ID of the Code42 organization this user belongs to.',
    )
    orgName: Optional[str] = Field(
        None, description='The name of the Code42 organization this user belongs to.'
    )
    notes: Optional[str] = Field(
        None, description='Descriptive information about the user.'
    )
    active: Optional[bool] = Field(
        None, description='Whether or not the user is enabled.'
    )
    blocked: Optional[bool] = Field(
        None,
        description='Whether or not logins and restores are disabled for the user.',
    )
    creationDate: Optional[str] = Field(
        None, description='The date and time the user was created.'
    )
    modificationDate: Optional[str] = Field(
        None, description='The date and time the user was last modified.'
    )


class DeviceListResponseCore(BaseModel):
    totalCount: Optional[int] = Field(None, description='The total number of devices')
    devices: Optional[List[DevicePreserveResponseCore]] = Field(
        None, description='A list of devices'
    )


class LegalHoldCustodianMatterListResponseCore(BaseModel):
    matters: Optional[List[LegalHoldCustodianMatterPreserveResponseCore]] = Field(
        None, description='A list of Legal Hold matters for a custodian.'
    )


class LegalHoldMatterCustodianListResponseCore(BaseModel):
    custodians: Optional[List[LegalHoldMatterCustodianPreserveResponseCore]] = Field(
        None, description='A list of Legal Hold custodians on a matter.'
    )


class LegalHoldMatterPreserveResponseCore(BaseModel):
    matterId: Optional[str] = Field(
        None, description='The unique identifier of the matter.'
    )
    name: Optional[str] = Field(None, description='The name of the matter.')
    description: Optional[str] = Field(
        None, description='The description of the matter.'
    )
    notes: Optional[str] = Field(None, description='Notes about the matter.')
    active: Optional[bool] = Field(
        None, description='Whether the matter is currently active.'
    )
    creationDate: Optional[str] = Field(
        None, description='The date and time the matter was created.'
    )
    lastModifiedDate: Optional[str] = Field(
        None, description='The date and time the matter was last modified.'
    )
    creatorObject: Optional[Any] = Field(
        None, description='Information about the user who created the matter.'
    )
    creatorPrincipal: Optional[PrincipalInfoResponseCore] = None
    policyId: Optional[str] = Field(
        None, description='The ID of the policy containing the matter.'
    )


class LegalHoldMatterResponseCore(BaseModel):
    matterId: Optional[str] = Field(
        None, description='The unique identifier of the matter.'
    )
    name: Optional[str] = Field(None, description='The name of the matter.')
    description: Optional[str] = Field(
        None, description='The description of the matter.'
    )
    notes: Optional[str] = Field(None, description='Notes about the matter.')
    active: Optional[bool] = Field(
        None, description='Whether the matter is currently active.'
    )
    creationDate: Optional[str] = Field(
        None, description='The date and time the matter was created.'
    )
    lastModifiedDate: Optional[str] = Field(
        None, description='The date and time the matter was last modified.'
    )
    creatorObject: Optional[Any] = Field(
        None, description='Information about the user who created the matter.'
    )
    creatorPrincipal: Optional[PrincipalInfoResponseCore] = None
    policyId: Optional[str] = Field(
        None, description='The ID of the policy containing the matter.'
    )


class LegalHoldPolicyPreserveResponseCore(BaseModel):
    policyId: Optional[str] = Field(
        None, description='The unique identifier for a legal hold policy.'
    )
    name: Optional[str] = Field(None, description='The name of the legal hold policy.')
    creatorUser: Optional[LegalHoldCreatorUserResponseCore] = None
    creatorPrincipal: Optional[PrincipalInfoResponseCore] = None
    creationDate: Optional[str] = Field(
        None, description='The date the policy was created.'
    )
    modificationDate: Optional[str] = Field(
        None, description='The date the policy was last modified.'
    )


class LegalHoldPolicyResponseCore(BaseModel):
    policyId: Optional[str] = Field(
        None, description='The unique identifier for a legal hold policy.'
    )
    name: Optional[str] = Field(None, description='The name of the legal hold policy.')
    creatorUser: Optional[LegalHoldCreatorUserResponseCore] = None
    creatorPrincipal: Optional[PrincipalInfoResponseCore] = None
    creationDate: Optional[str] = Field(
        None, description='The date the policy was created.'
    )
    modificationDate: Optional[str] = Field(
        None, description='The date the policy was last modified.'
    )


class OrgListResponseCore(BaseModel):
    totalCount: Optional[int] = None
    orgs: Optional[List[OrgPreserveResponseCore]] = None


class UserListResponseCore(BaseModel):
    totalCount: Optional[int] = None
    users: Optional[List[UserPreserveResponseCore]] = None


class LegalHoldMatterListResponseCore(BaseModel):
    matters: Optional[List[LegalHoldMatterPreserveResponseCore]] = Field(
        None, description='A list of Legal Hold matters.'
    )


class LegalHoldPolicyListResponseCore(BaseModel):
    policies: Optional[List[LegalHoldPolicyPreserveResponseCore]] = Field(
        None, description='A list of Legal Hold policies.'
    )
