# generated by datamodel-codegen:
#   filename:  alerts.json
#   timestamp: 2022-09-12T14:53:59+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, conint, constr

from incydr._core.models import ResponseModel


class Model(BaseModel):
    __root__: Any


class AlertState(str, Enum):
    """
    Enum indicating possible alert states.
    """

    open = "OPEN"
    resolved = "RESOLVED"
    in_progress = "IN_PROGRESS"
    pending = "PENDING"


class AddNoteCommand(BaseModel):
    tenant_id: constr(max_length=40) = Field(
        ...,
        alias="tenantId",
        description="The unique identifier representing the tenant.",
        example="MyExampleTenant",
    )
    alert_id: constr(max_length=40) = Field(
        ...,
        alias="alertId",
        description="The unique identifier representing the alert you want to act upon.",
        example="ExampleAlertId",
    )
    note: constr(max_length=2000) = Field(
        ...,
        description="The note to attach to the alert.",
        example="This is an example note.",
    )


class RuleType(str, Enum):
    """
    Rule type that generates alerts.
    """

    fed_endpoint_exfiltration = "FED_ENDPOINT_EXFILTRATION"
    fed_cloud_share_permissions = "FED_CLOUD_SHARE_PERMISSIONS"
    fed_file_type_mismatch = "FED_FILE_TYPE_MISMATCH"
    fed_file_name_match = "FED_FILE_NAME_MATCH"
    fed_composite = "FED_COMPOSITE"


class SeverityRating(str, Enum):
    """
    Possible severity values for an alert.
    """

    low = "LOW"
    medium = "MEDIUM"
    high = "HIGH"


class RiskSeverityRating(str, Enum):
    unknown = "UNKNOWN"
    no_risk_indicated = "NO_RISK_INDICATED"
    low = "LOW"
    moderate = "MODERATE"
    high = "HIGH"
    critical = "CRITICAL"


class NotificationType(str, Enum):
    """
    Type of notification.
    """

    email = "EMAIL"


class WatchlistType(str, Enum):
    """
    Type of watchlist.
    """

    contract_employee = "CONTRACT_EMPLOYEE"
    departing_employee = "DEPARTING_EMPLOYEE"
    elevated_access_privileges = "ELEVATED_ACCESS_PRIVILEGES"
    flight_risk = "FLIGHT_RISK"
    high_impact_employee = "HIGH_IMPACT_EMPLOYEE"
    new_employee = "NEW_EMPLOYEE"
    performance_concerns = "PERFORMANCE_CONCERNS"
    poor_security_practices = "POOR_SECURITY_PRACTICES"
    suspicious_system_activity = "SUSPICIOUS_SYSTEM_ACTIVITY"
    watchlist_type_unspecified = "WATCHLIST_TYPE_UNSPECIFIED"


class ProblemType(str, Enum):
    """
    Potential issues when running a query on alerts.
    """

    illegal_value = "IllegalValue"
    illegal_operator = "IllegalOperator"
    must_be_email_address = "MustBeEmailAddress"
    max_length_exceeded = "MaxLengthExceeded"
    invalid_page_size = "InvalidPageSize"
    invalid_page_number = "InvalidPageNumber"
    missing_value = "MissingValue"
    missing_groups = "MissingGroups"
    missing_filters = "MissingFilters"
    max_filters_exceeded = "MaxFiltersExceeded"
    search_failed = "SearchFailed"


class FilterOperator(str, Enum):
    """
    The filter operator to use.
    """

    is_ = "IS"
    is_not = "IS_NOT"
    on_or_before = "ON_OR_BEFORE"
    on_or_after = "ON_OR_AFTER"
    on = "ON"
    less_than = "LESS_THAN"
    greater_than = "GREATER_THAN"
    contains = "CONTAINS"
    does_not_contain = "DOES_NOT_CONTAIN"


class SearchClause(str, Enum):
    """
    The filter clause to use when combining the search filters.  Must be AND/OR.s
    """

    and_ = "AND"
    or_ = "OR"


class SortDirection(str, Enum):
    """
    The sort direction applied to the returned page of alerts.
    """

    asc = "ASC"
    desc = "DESC"


class Observation(BaseModel):
    id: Optional[str] = Field(
        None, description="Id of given observation.", example="uniqueObservationId"
    )
    observed_at: datetime = Field(
        ...,
        alias="observedAt",
        description="Timestamp when the activity was first observed.",
        example="2020-02-19T01:57:45.006683Z",
    )
    last_observed_at: Optional[datetime] = Field(
        None,
        alias="lastObservedAt",
        description="Timestamp when the activity was last observed.",
        example="2020-02-19T01:57:45.006683Z",
    )
    type: Optional[str] = Field(
        None,
        description="The type of observation data recorded.",
        example="FedCloudSharePermissions",
    )
    data: Optional[str] = Field(
        None,
        description="The JSON formatted observation data rolled into one aggregation.",
        example='{"type$":"OBSERVED_CLOUD_SHARE_ACTIVITY","id":"exampleId","sources":["OneDrive"],"exposureTypes":["PublicLinkShare"],"firstActivityAt":"2020-02-19T01:50:00.0000000Z","lastActivityAt":"2020-02-19T01:55:00.0000000Z","fileCount":2,"totalFileSize":200,"fileCategories":[{"type$":"OBSERVED_FILE_CATEGORY","category":"Document","fileCount":2,"totalFileSize":53,"isSignificant":false}],"outsideTrustedDomainsEmailsCount":0,"outsideTrustedDomainsTotalDomainCount":0,"outsideTrustedDomainsTotalDomainCountTruncated":false}',
    )


class Note(BaseModel):
    id: Optional[str] = Field(
        None, description="Unique id of the note.", example="noteId"
    )
    last_modified_at: datetime = Field(
        ...,
        alias="lastModifiedAt",
        description="Timestamp of when the note was last modified.",
        example="2020-02-19T01:57:45.006683Z",
    )
    last_modified_by: Optional[str] = Field(
        None,
        alias="lastModifiedBy",
        description="User who last modified the note.",
        example="exampleUsername",
    )
    message: Optional[str] = Field(
        None, description="The note itself.", example="This is a note."
    )


class DetailsQuery(BaseModel):
    alert_ids: List[str] = Field(
        ...,
        alias="alertIds",
        description="The unique identifiers representing the alerts you want to act upon.",
        example=["ExampleAlertId1", "ExampleAlertId2"],
        max_length=100,
    )


class AuditInfo(BaseModel):
    modified_by: Optional[str] = Field(
        None,
        alias="modifiedBy",
        description="Username of the individual who last modified the rule.",
        example="UserWhoMostRecentlyModifiedTheRule",
    )
    modified_at: datetime = Field(
        ...,
        alias="modifiedAt",
        description="Timestamp of when the rule was last modified.",
        example="2020-02-19T01:57:45.006683Z",
    )


class UpdateStateCommand(BaseModel):
    tenant_id: constr(max_length=40) = Field(
        ...,
        alias="tenantId",
        description="The unique identifier representing the tenant.",
        example="MyExampleTenant",
    )
    alert_ids: List[str] = Field(
        ...,
        alias="alertIds",
        description="The unique identifiers representing the alerts you want to act upon.",
        example=["ExampleAlertId1", "ExampleAlertId2"],
        max_length=100,
    )
    state: AlertState = Field(
        ..., description="The state to update the given alerts to."
    )
    note: Optional[constr(max_length=2000)] = Field(
        None,
        description="An optional note to attach to the alert",
        example="This is an example note.",
    )


class NotificationInfo(BaseModel):
    notification_type: NotificationType = Field(
        ..., alias="notificationType", description="Type of notification."
    )
    notification_address: Optional[str] = Field(
        None,
        alias="notificationAddress",
        description="Address notification was sent to.",
        example="myUsername@company.com",
    )


class Watchlist(BaseModel):
    id: Optional[str] = Field(
        None, description="Unique id of this watchlist.", example="guid"
    )
    name: Optional[str] = Field(
        None, description="Name of the watchlist.", example="Development Department"
    )
    type: WatchlistType = Field(
        ..., description="Type of watchlist.", example="DEPARTING_EMPLOYEE"
    )
    is_significant: bool = Field(
        ...,
        alias="isSignificant",
        description="Indicates whether the watchlist was part of the triggering rule's criteria.",
        example="true",
    )


class QueryProblem(BaseModel):
    bad_filter: Optional[str] = Field(
        None, alias="badFilter", description="The filter that caused the issue."
    )
    type: ProblemType = Field(..., description="The type of query problem.")


class SearchFilter(BaseModel):
    term: str = Field(
        ...,
        description="The alert or rule metadata attribute to search on.\n\nFor alert queries, value must be one of: AlertId, TenantId, Type, Name, Description, Actor, ActorId, Target, RiskSeverity, RuleSource, CreatedAt, Observations, Notes, Watchlists, HasAuthSignificantWatchlist, State, StateLastModifiedAt, StateLastModifiedBy, LastModifiedTime, LastModifiedBy, RuleId, Severity.\n\nFor rule queries, value must be one of RuleMetadataId, TenantId, ObserverRuleId, Type, Name, Description, IsEnabled, ModifiedAt, ModifiedBy, CreatedAt, CreatedBy, LogString. ",
        example="Name",
    )
    operator: FilterOperator = Field(..., example="IS")
    value: str = Field(
        ...,
        description="The value you want to use in the filter.",
        example="This is a name.",
    )


class ObserverRuleMetadata(AuditInfo):
    name: Optional[str] = Field(
        None,
        description="The name of the rule.",
        example="My Removable Media Exfiltration Rule",
    )
    description: Optional[str] = Field(
        None,
        description="The description of the rule.",
        example="Will generate alerts when files moved to USB.",
    )
    severity: Optional[SeverityRating] = Field(
        None, description="The static severity of the rule (deprecated)."
    )
    is_system: Optional[bool] = Field(
        None,
        alias="isSystem",
        description="Boolean indicating if the rule was created from another Code42 Application.",
        example="FALSE",
    )
    is_enabled: bool = Field(
        ...,
        alias="isEnabled",
        description="Boolean indicating if the rule is enabled to trigger alerts.",
        example="TRUE",
    )
    rule_source: Optional[str] = Field(
        None,
        alias="ruleSource",
        description="The source of the rule.  Will be one of [DepartingEmployee, Alerting, HighRiskEmployee]",
        example="Alerting",
    )


class AlertEssentials(BaseModel):
    tenant_id: constr(max_length=40) = Field(
        ...,
        alias="tenantId",
        description="The unique identifier representing the tenant.",
        example="MyExampleTenant",
    )
    type: RuleType = Field(..., description="Rule type that generated the alert.")
    name: Optional[str] = Field(
        None,
        description="The name of the alert.  Same as the name of the rule that triggered it.",
        example="Removable Media Exfiltration Rule",
    )
    description: Optional[str] = Field(
        None,
        description="The description of the alert.  Same as the description of the rule that triggered it.",
        example="Alert me on all removable media exfiltration.",
    )
    actor: Optional[str] = Field(
        None,
        description="The user who triggered the alert.",
        example="exampleUser@mycompany.com",
    )
    actor_id: Optional[str] = Field(
        None,
        alias="actorId",
        description="The authority user id who triggered the alert, if it is available.",
        example="authorityUserId",
    )
    target: Optional[str] = None
    severity: Optional[SeverityRating] = Field(
        None, description="Indicates static rule severity of the alert."
    )
    risk_severity: Optional[RiskSeverityRating] = Field(
        None,
        alias="riskSeverity",
        description="Indicates event risk severity of the alert.",
        example="MODERATE",
    )
    notification_info: Optional[List[NotificationInfo]] = Field(
        None,
        alias="notificationInfo",
        description="Notification information of the alert.  Not queried/returned.",
        example=[],
    )
    rule_id: Optional[str] = Field(
        None,
        alias="ruleId",
        description="The unique id corresponding to the rule which triggered the alert.",
        example="uniqueRuleId",
    )
    rule_source: Optional[str] = Field(
        None,
        alias="ruleSource",
        description="Indicates source of rule creation.  Either alerting or lens application name.",
        example="Departing Employee",
    )
    watchlists: Optional[List[Watchlist]] = Field(
        None,
        description="Watchlists the actor is on at the time of the alert.",
        example=[],
    )


class FilterGroup(BaseModel):
    filters: List[SearchFilter] = Field(
        ..., description="The list of search filters to query on."
    )
    filter_clause: SearchClause = Field(..., alias="filterClause")


class ObserverRuleMetadataEssentials(ObserverRuleMetadata):
    tenant_id: constr(max_length=40) = Field(
        ...,
        alias="tenantId",
        description="The unique identifier representing the tenant.",
        example="MyExampleTenant",
    )
    observer_rule_id: Optional[str] = Field(
        None,
        alias="observerRuleId",
        description="Id of the rule in the observer.",
        example="UniqueRuleId",
    )
    type: RuleType = Field(..., description="Rule type of the rule.")


class RuleMetadataSearchQuery(BaseModel):
    tenant_id: constr(max_length=40) = Field(
        ...,
        alias="tenantId",
        description="The unique identifier representing the tenant.",
        example="MyExampleTenant",
    )
    groups: Optional[List[FilterGroup]] = None
    group_clause: str = Field(
        ...,
        alias="groupClause",
        description="The clause to use when combining group filters.  Must be AND/OR.",
        example="AND",
    )
    pg_size: conint(le=500) = Field(
        ...,
        alias="pgSize",
        description="The number of items to return in one request.  Value must be between 0 and 100.",
        example="20",
    )
    pg_num: int = Field(
        ...,
        alias="pgNum",
        description="The page number to return. Page 0 is the first page of results.",
        example="0",
    )
    srt_key: str = Field(
        ...,
        alias="srtKey",
        description="The rule metadata attribute to sort by.  Value must be one of: RuleMetadataId, TenantId, ObserverRuleId, Type, Name, Description, IsEnabled, ModifiedAt, ModifiedBy, CreatedAt, CreatedBy, LogString",
        example="CreatedAt",
    )
    srt_direction: Optional[SortDirection] = Field(None, alias="srtDirection")


class AlertSummary(AlertEssentials):
    id: Optional[str] = Field(
        None, description="The unique id of the alert.", example="alertId"
    )
    created_at: datetime = Field(
        ...,
        alias="createdAt",
        description="The timestamp when the alert was created.",
        example="2020-02-19T01:57:45.006683Z",
    )
    state: AlertState = Field(..., description="The current state of the alert.")
    state_last_modified_by: Optional[str] = Field(None, alias="stateLastModifiedBy")
    state_last_modified_at: Optional[datetime] = Field(
        None, alias="stateLastModifiedAt"
    )


class SearchQuery(BaseModel):
    tenant_id: constr(max_length=40) = Field(
        ...,
        alias="tenantId",
        description="The unique identifier representing the tenant.",
        example="MyExampleTenant",
    )
    groups: Optional[List[FilterGroup]] = None
    group_clause: str = Field(
        ...,
        alias="groupClause",
        description="The clause to use when combining group filters.  Must be AND/OR.",
        example="OR",
    )
    pg_size: conint(le=500) = Field(
        ...,
        alias="pgSize",
        description="The number of items to return in one request.  Value must be between 0 and 100.",
        example="20",
    )
    pg_num: int = Field(
        ...,
        alias="pgNum",
        description="The page number to return. Page 0 is the first page of results.",
        example="0",
    )
    srt_key: str = Field(
        ...,
        alias="srtKey",
        description="The alert attribute to sort by.  Value must be one of: AlertId, TenantId, Type, Name, Description, Actor, ActorId, Target, RiskSeverity, RuleSource, CreatedAt, Observations, Notes, Watchlists, HasAuthSignificantWatchlist, State, StateLastModifiedAt, StateLastModifiedBy, LastModifiedTime, LastModifiedBy, RuleId, Severity",
        example="CreatedAt",
    )
    srt_direction: Optional[SortDirection] = Field(None, alias="srtDirection")


class AlertDetails(AlertSummary):
    observations: Optional[List[Observation]] = Field(
        None, description="Observation list included on the alert."
    )
    note: Optional[Note] = Field(
        None, description="Most recent note added to the alert."
    )


class RuleMetadata(ObserverRuleMetadataEssentials):
    id: Optional[str] = Field(
        None, description="Id of the rule.", example="UniqueRuleId"
    )
    created_by: Optional[str] = Field(
        None,
        alias="createdBy",
        description="Username of the individual who created the rule.",
        example="UserWhoCreatedTheRule",
    )
    created_at: datetime = Field(
        ...,
        alias="createdAt",
        description="Timestamp of when the rule was created.",
        example="2020-02-19T01:57:45.006683Z",
    )


class AlertQueryResponse(ResponseModel):
    alerts: Optional[List[AlertSummary]] = Field(
        None, description="List of alerts that are returned."
    )
    total_count: int = Field(
        ...,
        alias="totalCount",
        description="The number of alerts that match the given query.",
        example="3",
    )
    problems: Optional[List[QueryProblem]] = Field(
        None,
        description="Potential issues that were hit while trying to run the query.",
        example=[],
    )


class AlertDetailsResponse(ResponseModel):
    alerts: Optional[List[AlertDetails]] = Field(
        None, description="The alerts returned by the details query."
    )


class RuleMetadataSearchResponse(ResponseModel):
    rule_metadata: Optional[List[RuleMetadata]] = Field(
        None, alias="ruleMetadata", description="List of rules that are returned."
    )
    total_count: int = Field(
        ...,
        alias="totalCount",
        description="The number of rules that match the given query.",
        example="3",
    )
    problems: Optional[List[QueryProblem]] = Field(
        None,
        description="Potential issues that were hit while trying to run the query.",
        example=[],
    )
